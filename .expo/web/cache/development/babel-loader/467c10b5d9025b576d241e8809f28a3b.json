{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { useState, useEffect } from \"react\";\nimport { ResponseType, useAuthRequest } from \"expo-auth-session\";\nimport { albumTracks } from \"./utils/apiOptions\";\nimport { REDIRECT_URI, SCOPES, CLIENT_ID, ALBUM_ID } from \"./utils/constants\";\nimport SongBuffer from \"./SongBuffer\";\nimport Colors from \"./Themes/colors\";\nimport Images from \"./Themes/images\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar discovery = {\n  authorizationEndpoint: \"https://accounts.spotify.com/authorize\",\n  tokenEndpoint: \"https://accounts.spotify.com/api/token\"\n};\nexport default function App() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      token = _useState2[0],\n      setToken = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      tracks = _useState4[0],\n      setTracks = _useState4[1];\n\n  var _useAuthRequest = useAuthRequest({\n    responseType: ResponseType.Token,\n    clientId: CLIENT_ID,\n    scopes: SCOPES,\n    usePKCE: false,\n    redirectUri: REDIRECT_URI\n  }, discovery),\n      _useAuthRequest2 = _slicedToArray(_useAuthRequest, 3),\n      request = _useAuthRequest2[0],\n      response = _useAuthRequest2[1],\n      promptAsync = _useAuthRequest2[2];\n\n  useEffect(function () {\n    if ((response == null ? void 0 : response.type) === \"success\") {\n      var access_token = response.params.access_token;\n      setToken(access_token);\n    }\n  }, [response]);\n  useEffect(function () {\n    if (token) {\n      albumTracks(ALBUM_ID, setTracks, token);\n    }\n  }, [token]);\n\n  if (token) {\n    return _jsxs(SafeAreaView, {\n      style: styles.container,\n      children: [_jsxs(View, {\n        style: styles.logoHolder,\n        children: [_jsx(Image, {\n          style: styles.icon1,\n          source: Images.spotify\n        }), _jsx(Text, {\n          style: styles.titleText,\n          children: \"Album Track\"\n        })]\n      }), _jsx(View, {\n        style: styles.list,\n        children: _jsx(FlatList, {\n          data: tracks,\n          renderItem: function renderItem(_ref) {\n            var item = _ref.item,\n                index = _ref.index;\n            return _jsx(SongBuffer, {\n              length: item.duration_ms,\n              name: item.name,\n              name2: item.album.name,\n              artistName: item.artists[0].name,\n              img: item.album.images[0].url,\n              songNumber: index + 1\n            });\n          },\n          keyExtractor: function keyExtractor(item, index) {\n            return index.toString();\n          }\n        })\n      })]\n    });\n  } else {\n    return _jsx(SafeAreaView, {\n      style: styles.container,\n      children: _jsx(Pressable, {\n        style: styles.mainButton,\n        onPress: function onPress() {\n          return promptAsync();\n        },\n        children: _jsxs(View, {\n          style: styles.container3,\n          children: [_jsx(Image, {\n            style: styles.icon2,\n            source: Images.spotify\n          }), _jsx(Text, {\n            style: styles.text1,\n            children: \"CONNECT WITH SPOTIFY\"\n          })]\n        })\n      })\n    });\n  }\n}\nvar styles = StyleSheet.create({\n  mainButton: {\n    flexDirection: \"row\",\n    backgroundColor: Colors.spotify,\n    borderRadius: 100,\n    padding: '2%',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  container: {\n    backgroundColor: \"black\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flex: 1\n  },\n  list: {\n    flex: 20,\n    flexDirection: 'row'\n  },\n  logoHolder: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  titleText: {\n    fontSize: 30,\n    fontWeight: 'bold',\n    color: 'white'\n  },\n  text1: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: 'white'\n  },\n  icon2: {\n    height: 20,\n    width: 20\n  },\n  container3: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  icon1: {\n    height: 30,\n    width: 30\n  }\n});","map":{"version":3,"sources":["/Users/justin/Documents/GitHub/CS47-spotifypart2/App.js"],"names":["useState","useEffect","ResponseType","useAuthRequest","albumTracks","REDIRECT_URI","SCOPES","CLIENT_ID","ALBUM_ID","SongBuffer","Colors","Images","discovery","authorizationEndpoint","tokenEndpoint","App","token","setToken","tracks","setTracks","responseType","Token","clientId","scopes","usePKCE","redirectUri","request","response","promptAsync","type","access_token","params","styles","container","logoHolder","icon1","spotify","titleText","list","item","index","duration_ms","name","album","artists","images","url","toString","mainButton","container3","icon2","text1","StyleSheet","create","flexDirection","backgroundColor","borderRadius","padding","alignItems","justifyContent","flex","fontSize","fontWeight","color","height","width"],"mappings":"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","sourcesContent":["import { StyleSheet, Text, SafeAreaView } from \"react-native\";\nimport { useState, useEffect } from \"react\";\nimport { ResponseType, useAuthRequest } from \"expo-auth-session\";\nimport { albumTracks } from \"./utils/apiOptions\";\nimport { REDIRECT_URI, SCOPES, CLIENT_ID, ALBUM_ID } from \"./utils/constants\";\nimport SongBuffer from './SongBuffer';\n\nimport Colors from \"./Themes/colors\"\nimport Images from \"./Themes/images\"\n\nimport { Image, Pressable, FlatList, View } from \"react-native\";\n\nconst discovery = {\n  authorizationEndpoint: \"https://accounts.spotify.com/authorize\",\n  tokenEndpoint: \"https://accounts.spotify.com/api/token\"\n};\n\nexport default function App() {\n  const [token, setToken] = useState(\"\");\n  const [tracks, setTracks] = useState([]);\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      responseType: ResponseType.Token,\n      clientId: CLIENT_ID,\n      scopes: SCOPES,\n      usePKCE: false,\n      redirectUri: REDIRECT_URI\n    },\n    discovery\n  );\n\n  useEffect(() => {\n    if (response?.type === \"success\") {\n      const { access_token } = response.params;\n      setToken(access_token);\n    }\n  }, [response]);\n\n  useEffect(() => {\n    if (token) {\n      albumTracks(ALBUM_ID, setTracks, token);\n    }\n  }, [token]);\n\n\n  if (token) {\n    return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.logoHolder}>\n        <Image style={styles.icon1} source={(Images.spotify)} />\n        <Text style={styles.titleText}>\n          Album Track\n        </Text>\n      </View>\n      <View style={styles.list}>\n        <FlatList\n          data={tracks}\n          renderItem={({ item, index }) =>\n            <SongBuffer\n              length={item.duration_ms}\n              name={item.name}\n              name2={item.album.name}\n              artistName={item.artists[0].name}\n              img={item.album.images[0].url}\n              songNumber={index + 1}\n            />}\n          keyExtractor={(item, index) => index.toString()} />\n      </View>\n    </SafeAreaView>)\n  }\n  else {\n    return (\n      <SafeAreaView style={styles.container}>\n        <Pressable style={styles.mainButton}\n          onPress={() =>\n            promptAsync()\n          }>\n          <View style={styles.container3}>\n            <Image style={styles.icon2} source={(Images.spotify)} />\n            <Text style={styles.text1}>\n              CONNECT WITH SPOTIFY\n            </Text>\n          </View>\n        </Pressable>\n      </SafeAreaView>)\n  }\n}\n\nconst styles = StyleSheet.create({\n  mainButton: {\n    flexDirection: \"row\",\n    backgroundColor: Colors.spotify,\n    borderRadius: 100,\n    padding: '2%',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n\n  container: {\n    backgroundColor: \"black\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flex: 1\n  },\n  list: {\n    flex: 20,\n    flexDirection: 'row',\n\n  },\n  logoHolder: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  titleText: {\n    fontSize: 30,\n    fontWeight: 'bold',\n    color: 'white',\n\n  },\n  text1: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n\n  icon2: {\n    height: 20,\n    width: 20,\n\n  },\n  container3: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  icon1: {\n    height: 30,\n    width: 30,\n  },\n});\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}